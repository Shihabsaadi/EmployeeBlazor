@typeparam TItem
<table class="table is-fullwidth">
    <thead>
        <tr>
            @if (Columns == null || Columns.Count <= 0)
            {
                //Create the header with reflection
            }
            else
            {
                //Create the header based on column definitions
                foreach (var column in Columns)
                {
                    if (column.Alignment != Alignment.NotSet)
                    {
                        switch (column.Alignment)
                        {
                            case Alignment.Left:
                                <th class="align-left">@column.Caption</th>
                                break;
                            case Alignment.Center:
                                <th class="align-center">@column.Caption</th>
                                break;
                            case Alignment.Right:
                                <th class="align-right">@column.Caption</th>
                                break;
                            default:
                                break;
                        }
                    }
                    else
                    {
                        <th>@column.Caption</th>
                    }
                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in DataItems.Skip(pagingConfig.NumOfItemsToSkip(currentPageNumber)).Take(pagingConfig.NumOfItemsToTake(DataItems.Count())))
        {
            <tr>
                @foreach (var column in Columns)
                {
                    if (!string.IsNullOrWhiteSpace(column.Format) && column.DataType != DataType.NotSet)
                    {
                        string value = string.Empty;
                        switch (column.DataType)
                        {
                            case DataType.Date:
                            case DataType.DateTime:
                                value = DateTime.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString(column.Format);
                                break;
                            case DataType.Boolean:
                                value = bool.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString();
                                break;
                            case DataType.Currency:
                                value = Math.Round(double.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()), 2).ToString("c");
                                break;
                            default:
                                break;
                        }
                        if (column.Alignment != Alignment.NotSet)
                        {
                            <td align="@column.Alignment.ToString().ToLower()">@value</td>
                        }
                        else
                        {
                            <td>@value</td>
                        }
                    }
                    else
                    {
                        if (column.Alignment != Alignment.NotSet)
                        {
                            <td align="@column.Alignment.ToString().ToLower()">@typeof(TItem).GetProperty(column.DataField).GetValue(item)</td>
                        }
                        else
                        {
                            <td>@typeof(TItem).GetProperty(column.DataField).GetValue(item)</td>
                        }
                    }
                }
            </tr>
        }
    </tbody>
</table>
<div class="level">
 <div class="level-left">
   </div>
    <div class="level-right">
        <div class="level-item">
            @if (pagingConfig != null && pagingConfig.Enabled)
            {
                if (pagingConfig.CustomPager)
                {
                    @customPager
                }
                else
                {
                    <span style="font-size:14px; cursor:pointer" @onclick="GotoPrevPage"><b>&lt; Previous</b></span>
                    <span>&nbsp;&nbsp;Page @currentPageNumber of @pagingConfig.MaxPageNumber(DataItems.Count()) &nbsp;&nbsp;</span>
                    <span style="font-size:14px; cursor:pointer" @onclick="GotoNextPage"><b>Next &gt;</b></span>
                }
            }
        </div>
    </div>
</div>
@code {
    [Parameter]
    public List<TItem> DataItems { get; set; }
    [Parameter]
    public List<ColumnDefinition> Columns { get; set; }
    [Parameter]
    public PagingConfig pagingConfig { get; set; }
    [Parameter]
    public int currentPageNumber { get; set; } = 1;
    [Parameter]
    public RenderFragment customPager { get; set; }
    public void GotoPrevPage()
    {
        currentPageNumber = pagingConfig.PrevPageNumber(currentPageNumber);
    }
    public void GotoNextPage()
    {
        currentPageNumber = pagingConfig.NextPageNumber(currentPageNumber, DataItems.Count());
    }
}
